<resources>
    <string name="app_name">Orbit</string>
    <string name="orbit_vertex_shader">
        precision highp float;
        attribute vec4 aPosition;
        uniform mat4 uModelView;
        uniform mat4 uProjection;
        uniform vec3 uOrbit;
        varying vec4 vPosition;
        varying float vPhase;
        void main() {
            vPhase = aPosition.z;
            vec4 position = aPosition;
            position.z = 0.;
            float radius_inv = (1.+uOrbit.y*cos(vPhase-uOrbit.z))/uOrbit.x;
            if (!(radius_inv>0.)) radius_inv = .001;
            position.x = cos(vPhase)/radius_inv;
            position.y = sin(vPhase)/radius_inv;
            vPosition = uModelView*position;
            gl_Position = uProjection*vPosition;
        }
    </string>
    <string name="orbit_fragment_shader">
        precision highp float;
        uniform vec4 uColor;
        uniform float uMu;
        uniform float uTime;
        varying vec4 vPosition;
        varying float vPhase;
        uniform vec2 uTap;
        void main() {
            float phase = 6.2831*.5*uTime+vPhase;
            gl_FragColor = vec4(fract(phase),fract(uTap.x+uTime),fract(uTap.y+1.53*uTime),1);
            return;
        }
    </string>
    <string name="main_vertex_shader">
        precision highp float;
        attribute vec4 aPosition;
        uniform mat4 uModelView;
        uniform mat4 uProjection;
        uniform vec3 uOrbit;
        varying vec4 vPosition;
        varying float vPhase;
        void main() {
            vec4 position = aPosition;
            position.z = 0.;
            vPosition = uModelView*position;
            gl_Position = uProjection*vPosition;
        }
    </string>
    <string name="main_fragment_shader">
        precision highp float;
        uniform vec4 uColor;
        uniform int uMode;
        uniform float uTime;
        varying vec4 vPosition;
        varying float vPhase;
        uniform vec2 uTap;
        uniform sampler2D texture;
        void main() {
            if (uMode==1) {
                gl_FragColor = texture2D(texture, vPosition.xy);
                return;
            }
            gl_FragColor = uColor;
        }
    </string>
    <string name="button_vertex_shader">
        precision highp float;
        attribute vec4 aPosition;
        uniform mat4 uModelView;
        uniform mat4 uProjection;
        varying vec2 vCoord;
        void main() {
            vCoord = aPosition.xy+vec2(1,1);
            vCoord.x /= 4.;
            vCoord.y /= 2.;
            gl_Position = uProjection*uModelView*aPosition;
        }
    </string>
    <string name="button_fragment_shader">
        precision highp float;
        uniform vec4 uColor;
        uniform int uMode;
        varying vec2 vCoord;
        uniform sampler2D texture;
        void main() {
            vec2 coord = vCoord;
            if (uMode==0) coord.x += .5;
            vec4 color = texture2D(texture, coord);
            color = mat4(uColor, (1.-uColor)/2., (1.-uColor)/2., vec4(0,0,0,1))*color;
            gl_FragColor = color;
        }
    </string>
    <integer name="button_size">200</integer>
</resources>
